# main.tsx
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './components/app/App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)

# index.css
html, body, #root {
    margin: 0;
    padding: 0;
    height: 100%;
}
# models/post/PostDraft.ts
export default interface PostDraft {
    title: string,
    body: string
}
# models/post/Post.ts
import Comment from "../comment/Comment";
import User from "../user/User";
import PostDraft from "./PostDraft";

export default interface Post extends PostDraft {
    id: string,
    userId: string,
    imageUrl: string,
    createdAt: string,
    updatedAt: string,
    user: User
    comments: Comment[]
}
# models/comment/commentDraft.ts
export default interface CommentDraft {
    body: string;
}
# models/comment/Comment.ts
import User from "../user/User";
import CommentDraft from "./commentDraft";

export default interface Comment extends CommentDraft {
    id: string,
    postId: string,
    userId: string,
    body: string,
    createdAt: string,
    updatedAt: string,
    user: User
}
# models/user/User.ts
import { ReactNode } from "react";

export default interface User {
    avatar: string | undefined;
    email: ReactNode;
    id: string,
    name: string,
    username: string,
    password?: string,
    createdAt: string,
    updatedAt: string
}
# components/posts/comments/Comments.tsx
import { useState } from 'react';
import CommentModel from '../../../models/comment/Comment';
import Comment from '../comment/Comment';
import NewComment from '../new-comment/NewComment';

interface CommentsProps {
    comments: CommentModel[];
    postId: string;
    removeComment(commentId: string): void;
}

export default function Comments(props: CommentsProps): JSX.Element {
    const { comments, postId } = props;

    const [currentComments ] = useState(comments);


    

    return (
        <div className="Comments">
            <div>
                total comments: {currentComments.length}
            </div>
            <div>
                <NewComment
                 postId={postId}
                 />
            </div>
            {currentComments.map((c) => (
                <Comment
                    key={c.id}
                    comment={c}
                />
            ))}
        </div>
    );
}
# components/posts/post/Post.tsx
import './Post.css';
import PostModel from '../../../models/post/Post';
import profileService from '../../../services/profile';
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Comments from '../comments/Comments';
import { useAppDispatch } from '../../../redux/hooks';
import { removePost } from '../../../redux/profileSlice';

interface PostProps {
    post: PostModel;
    isAllowActions?: boolean;
    remove?(id: string): void;
}

export default function Post(props: PostProps): JSX.Element {

    const [post, setPost] = useState(props.post);
    console.log(post); // So that I don't get an error about the post variable because it is not really used but it is necessary to appear
    const { title, body, createdAt, id } = props.post;
    const { name } = props.post.user;
    const navigate = useNavigate();

    const { isAllowActions } = props;

    const [liked, setLiked] = useState(false);
    const [animateHeart, setAnimateHeart] = useState(false);
    const [likeCount, setLikeCount] = useState(0);
    const [showComments, setShowComments] = useState(false);
    const [isDeleting] = useState(false); 

    const dispatch = useAppDispatch();

   async function deleteMe() {
    if(props.remove && confirm('are you sure you want delete this post?')){
        try{
            await profileService.remove(id);
            dispatch(removePost(id))
        } catch (e) {
            alert(e)
        }
    }
}

    function toggleLike() {
        setLiked(!liked);
        setAnimateHeart(true);

        setLikeCount((prev) => (liked ? prev - 1 : prev + 1));

        setTimeout(() => {
            setAnimateHeart(false);
        }, 500);
    }

    function editPost() {
        navigate(`/edit/${id}`);
    }

    function toggleComments() {
        setShowComments(!showComments);
    }

    function removeComment(commentId: string): void {
        const updatedComments = props.post.comments.filter((comment) => comment.id !== commentId);
        props.post.comments = updatedComments;
        setPost({ ...props.post }); 
    }

    return (
        <div className="Post">
            <h2>{title}</h2>
            <div>
                by {name} at {new Date(createdAt).toLocaleString()}
            </div>
            <div dangerouslySetInnerHTML={{ __html: body }} />
            {isAllowActions && (
                <div className="actions">
                    <button
                        className={`like-button ${liked ? 'liked' : ''}`}
                        onClick={toggleLike}
                    >
                        <div className={`heart-animation ${animateHeart ? 'animate' : ''}`}></div>
                        {liked ? 'üëé Unlike' : 'üëç Like'}
                    </button>
                    <span className="like-count">{likeCount} {likeCount === 1 ? 'Like' : 'Likes'}</span>
                    <button className="comment-button" onClick={toggleComments}>
                        {showComments ? 'Hide Comments' : 'Show Comments'}
                    </button>
                    <button className="edit-button" onClick={editPost}>Edit</button>
                    <button
                        className="delete-button"
                        onClick={deleteMe}
                        disabled={isDeleting} 
                    >
                        {isDeleting ? 'Deleting...' : 'Delete'}
                    </button>
                </div>
            )}
            {showComments && props.post?.comments && (
                <Comments
                    comments={props.post.comments}
                    postId={id}
                    removeComment={removeComment}
                />
            )}
        </div>
    );
}


# components/posts/post/Post.css
.Post {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    margin: 20px auto;
    padding: 20px;
    max-width: 700px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
}

.Post:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);
}

.Post div:first-child {
    font-size: 1.8rem;
    font-weight: bold;
    color: #333333;
    line-height: 1.4;
    margin-bottom: 15px;
    text-shadow: 1px 1px 4px rgba(0, 0, 0, 0.1);
}

.Post div:nth-child(2) {
    font-size: 0.9rem;
    color: #666666;
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 15px;
}

.Post div:nth-child(2) span {
    font-weight: bold;
    color: #007bff;
    transition: color 0.3s ease;
}

.Post div:nth-child(2) span:hover {
    color: #0056b3;
    text-decoration: underline;
}

.Post div:nth-child(3) {
    font-size: 1.1rem;
    color: #555555;
    line-height: 1.6;
    margin-bottom: 20px;
    word-wrap: break-word;
}

.actions {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 15px;
    margin-top: 10px;
    flex-wrap: nowrap;
}

.like-button {
    background: #e0f7fa;
    border: 1px solid #00bcd4;
    color: #00796b;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    position: relative;
    transition: all 0.3s ease;
}

.like-button:hover {
    background: #00bcd4;
    color: white;
    box-shadow: 0 4px 8px rgba(0, 188, 212, 0.3);
    transform: scale(1.1);
}

.like-button.liked {
    background: #f44336;
    border: 1px solid #b71c1c;
    color: white;
    box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);
}

.like-button.liked:hover {
    background: #d32f2f;
}

.heart-animation {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%) scale(0.5);
    font-size: 24px;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.5s ease, transform 0.5s ease;
    user-select: none;
}

.heart-animation.like.animate {
    opacity: 1;
    transform: translateY(-20px) scale(2);
    color: #4caf50; 
    animation: pop-like 0.5s ease forwards;
}

.heart-animation.unlike.animate {
    opacity: 1;
    transform: translateY(20px) scale(2);
    color: #f44336; 
    animation: pop-unlike 0.5s ease forwards;
}

@keyframes pop-like {
    0% {
        opacity: 0;
        transform: scale(1);
    }
    50% {
        opacity: 1;
        transform: scale(1.5);
    }
    100% {
        opacity: 0;
        transform: translateY(-20px) scale(2);
    }
}

@keyframes pop-unlike {
    0% {
        opacity: 0;
        transform: scale(1);
    }
    50% {
        opacity: 1;
        transform: scale(1.5);
    }
    100% {
        opacity: 0;
        transform: translateY(20px) scale(2);
    }
}

.like-count {
    font-size: 0.9rem;
    color: #555;
    align-self: center;
}

.comment-button {
    background: #f3e5f5;
    border: 1px solid #9c27b0;
    color: #6a1b9a;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: all 0.3s ease;
}

.comment-button:hover {
    background: #9c27b0;
    color: white;
    box-shadow: 0 4px 8px rgba(156, 39, 176, 0.3);
    transform: scale(1.1);
}

.edit-button {
    background: #e3f2fd;
    border: 1px solid #2196f3;
    color: #1565c0;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 5px;
    transition: all 0.3s ease;
}

.edit-button:hover {
    background: #2196f3;
    color: white;
    box-shadow: 0 4px 8px rgba(33, 150, 243, 0.3);
    transform: scale(1.05);
}

.delete-button {
    background: #ffebee;
    border: 1px solid #f44336;
    color: #b71c1c;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
    transition: all 0.3s ease;
    width: 100px; 
    height: 40px; 
    box-sizing: border-box;
    text-align: center;
    position: relative; 
    white-space: nowrap; 
    overflow: hidden; 
    text-overflow: ellipsis; 
}

.delete-button:hover {
    background: #f44336;
    color: #b71c1c; 
    box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);
    transform: scale(1.05);
}

.delete-button:disabled {
    background: #ffcdd2; 
    color: #b71c1c; 
    cursor: not-allowed;
}

.ButtonLoading {
    position: absolute; 
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.9rem;
    font-weight: bold;
    color: #b71c1c;
    width: 100%;
    height: 100%;
}

.ButtonLoading::after {
    content: '';
    margin-left: 10px; 
    width: 16px;
    height: 16px;
    border: 2px solid transparent;
    border-top: 2px solid #b71c1c;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}
# components/posts/comment/Comment.tsx
import { useState } from 'react';
import CommentModel from '../../../models/comment/Comment';
import EditComment from '../editComment/EditComment';
import './Comment.css';

interface CommentProps {
    comment: CommentModel
}

export default function Comment(props: CommentProps): JSX.Element {
    const { user: { name }, body, createdAt, id } = props.comment;


    const formattedDate = new Date(createdAt).toLocaleString('en-GB', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
    });

    const [likeCount, setLikeCount] = useState(0);
    const [liked, setLiked] = useState(false);
    const [isEditing, setIsEditing] = useState(false);
    const [commentBody, setCommentBody] = useState(body);
    const [isDeleting, setIsDeleting] = useState(false);



    const toggleLike = () => {
        setLikeCount(liked ? likeCount - 1 : likeCount + 1);
        setLiked(!liked);
    };

    const handleEditClick = () => {
        setIsEditing(true);
    };

    const handleCancelEdit = () => {
        setIsEditing(false);
    };

    const handleSaveEdit = (updatedBody: string) => {
        setCommentBody(updatedBody);
        setIsEditing(false);
    };

    const handleDelete = () => {
        if (window.confirm('Are you sure you want to delete this comment?')) {
            setIsDeleting(true);
        }
    };


    return (
        <div className="Comment">
            <div className="comment-header">
                <span className="comment-author">{name}</span>
                <span className="comment-date">on {formattedDate}</span>
            </div>
            <div className="comment-body">
                {isEditing ? (
                    <EditComment
                        commentId={id}
                        currentBody={commentBody}
                        onSave={handleSaveEdit}
                        onCancel={handleCancelEdit}
                    />
                ) : (
                    commentBody
                )}
            </div>
            {!isEditing && (
                <div className="comment-actions">
                    <button className={`action-button like-button ${liked ? 'liked' : ''}`} onClick={toggleLike}>
                        {liked ? 'Unlike' : 'Like'} ({likeCount})
                    </button>
                    <button className="action-button reply-button" onClick={handleEditClick}>
                        Edit
                    </button>
                    <button className="action-button delete-button" onClick={handleDelete} >
                        {isDeleting ? 'Deleting...' : 'Delete'}
                    </button>
                </div>
            )}
        </div>
    );
}
# components/posts/comment/Comment.css
.Comment {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    margin: 20px 0;
    padding: 20px;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    position: relative;
}

.Comment:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);
    background: #f0fff4;
}

.comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #f0f0f0;
    padding-bottom: 10px;
    margin-bottom: 15px;
}

.comment-author {
    font-size: 1.2rem;
    font-weight: bold;
    color: #2e7d32;
    text-shadow: 1px 1px 4px rgba(46, 125, 50, 0.2);
}

.comment-date {
    font-size: 0.9rem;
    color: #666666;
    font-style: italic;
}

.comment-body {
    font-size: 1rem;
    color: #4a4a4a;
    line-height: 1.6;
    margin-bottom: 15px;
    padding-left: 10px;
    border-left: 4px solid #4caf50;
    background: #f9f9f9;
    padding: 10px;
    border-radius: 6px;
}

.comment-actions {
    display: flex;
    gap: 15px;
}

.action-button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.action-button:hover {
    background: #4caf50;
    color: white;
    box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
    transform: scale(1.05);
}

.action-button:active {
    transform: scale(0.95);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

.reply-button:before {
    content: '‚úèÔ∏è';
}

.delete-button {
    background: #ffebee;
    border: 1px solid #f44336;
    color: #d32f2f;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 8px;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.1);
}

.delete-button:hover {
    background: #f44336;
    color: white;
    box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);
    transform: scale(1.05);
}

.delete-button:active {
    transform: scale(0.95);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}

@media (max-width: 768px) {
    .Comment {
        padding: 15px;
    }

    .comment-actions {
        flex-wrap: wrap;
        gap: 10px;
    }

    .action-button {
        padding: 10px;
        font-size: 0.85rem;
    }
}
# components/posts/new-comment/NewComment.css
.NewComment {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    margin: 20px auto;
    padding: 20px;
    max-width: 700px;
    width: 100%;
    box-sizing: border-box;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.NewComment:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);
}

.NewComment h2 {
    font-size: 1.5rem;
    color: #333333;
    margin-bottom: 15px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
}

.NewComment form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.NewComment textarea {
    width: 100%;
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid #cccccc;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-sizing: border-box;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    font-family: 'Arial', sans-serif;
    resize: vertical;
    min-height: 80px;
}

.NewComment textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    outline: none;
    background-color: #ffffff;
}

.NewComment button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    position: relative;
    gap: 8px;
    min-width: 120px;
}

.NewComment button:hover {
    background: #4caf50;
    color: white;
}

.NewComment button:disabled .ButtonLoading {
    color: #2e7d32;
}
# components/posts/new-comment/NewComment.tsx
import { useForm } from 'react-hook-form';
import './NewComment.css';
import CommentDraft from '../../../models/comment/commentDraft';
import CommentService from '../../../services/comments';
import { useAppDispatch } from '../../../redux/hooks';
import { addComment as addCommentProfile} from '../../../redux/profileSlice'
import { addComment as addCommentFeed } from '../../../redux/feedSlice'
import { useState } from 'react';

interface NewCommentProps {
    postId: string;
}

export default function NewComment(props: NewCommentProps) {
    const { postId } = props

    const { 
        register, 
        handleSubmit, 
        formState, 
        reset 
    } = useForm<CommentDraft>()  

    const dispatch = useAppDispatch()

    async function submit(draft: CommentDraft) {
        try {
            const newComment = await CommentService.create(postId, draft)
            reset()
            dispatch(addCommentProfile(newComment))
            dispatch(addCommentFeed(newComment))
        } catch (e) {
            alert(e)
        }
    }

    const [isSubmitting] = useState<boolean>(false)

    return (
        <div className="NewComment">
            <h2>New Comment</h2>
            <form onSubmit={handleSubmit(submit)}>
                <textarea
                    {...register('body', {
                        required: {
                            value: true,
                            message: 'Comment is required',
                        },
                        minLength: {
                            value: 20,
                            message: 'Comment must be at least 20 characters',
                        },
                    })}
                    placeholder="Enter your comment here"
                ></textarea>
                <span>{formState.errors.body?.message}</span>
                <button type="submit" disabled={isSubmitting}>
                    {isSubmitting ? 'Adding a comment...' : 'Add Comment'}
                </button>
            </form>
        </div>
    );

}

# components/posts/profile/Profile.tsx
import { useEffect, useState } from "react";
import { useAppDispatch, useAppSelector } from "../../../redux/hooks";
import LoaddingPageForProfile from "../../common/LoaddingPageForProfile/LoaddingPageForProfile";
import NewPost from "../new/NewPost";
import Post from "../post/Post";
import profile from "../../../services/profile";
import { init } from "../../../redux/profileSlice";
import useTitle from "../../../hooks/useTitle";

export default function Profile(): JSX.Element {
    useTitle('SN - Profile');

    const posts = useAppSelector(state => state.profile.posts);
    const dispatch = useAppDispatch();
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        let isMounted = true;
        (async () => {
            try {
                console.log("Fetching profile posts...");
                if (posts.length === 0 && isMounted) {
                    const postsFromServer = await profile.getProfile();
                    console.log("Posts fetched:", postsFromServer);
                    dispatch(init(postsFromServer));
                }
            } catch (e) {
                console.error("Error fetching profile posts:", e);
                alert("Error fetching profile posts");
            } finally {
                if (isMounted) {
                    setIsLoading(false);
                    console.log("Loading finished");
                }
            }
        })();
        return () => { isMounted = false; };
    }, [posts.length, dispatch]);
    return (
        <div className="Profile">
            {isLoading && <LoaddingPageForProfile />}
            {!isLoading && posts.length > 0 && (
                <>
                    <NewPost />
                    {posts.map(p => (
                        <Post key={p.id} post={p} isAllowActions={true} />
                    ))}
                </>
            )}
            {!isLoading && posts.length === 0 && <p>No posts available</p>}
        </div>
    );
}
# components/posts/feed/Feed.tsx
import { useEffect, useState } from 'react'
import './Feed.css'
import PostModel from '../../../models/post/Post'
import feed from '../../../services/feed'
import Post from '../post/Post'
import CommentModel from '../../../models/comment/Comment'
import useTitle from '../../../hooks/useTitle'


export default function Feed() {
    const [posts, setPosts] = useState<PostModel[]>([])

    useTitle('Feed')

    useEffect(() => {
        feed.getFeed()
            .then(setPosts)
            .catch(alert)

    }, [])

       function addComment(comment: CommentModel): void {
            const postsWithNewComment = [...posts]
            const postToAddCommentTo = postsWithNewComment.find(post => post.id === comment.postId)
            if(postToAddCommentTo){
                postToAddCommentTo.comments.unshift(comment)
            }
    
            setPosts(postsWithNewComment)
        }

    return (
        <div className='Feed'>
            {posts.map(p => <Post 
                            key={p.id} 
                            post={p}
                            addComment={addComment}
                            isAllowActions={false}
                            ></Post>)}
        </div>
    )
}
# components/posts/feed/Feed.css
.Feed {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    padding: 20px;
    background: linear-gradient(135deg, #f3f4f6, #ffffff);
    border-radius: 8px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    max-width: 900px;
    margin: 20px auto;
    border: 1px solid #eaeaea;
    overflow-y: auto;
    max-height: 80vh;
    scrollbar-width: thin;
    scrollbar-color: #d4d4d4 transparent;
}


.Feed::-webkit-scrollbar {
    width: 8px;
}

.Feed::-webkit-scrollbar-thumb {
    background-color: #d4d4d4;
    border-radius: 4px;
}

.Feed::-webkit-scrollbar-track {
    background-color: transparent;
}


.Feed::before {
    content: 'No posts to display.';
    font-size: 1.2rem;
    color: #888888;
    margin-top: 20px;
    display: none;
    text-align: center;
}

.Feed.empty::before {
    display: block;
}
# components/posts/new/NewPost.tsx
import { useForm } from 'react-hook-form';
import './NewPost.css';
import PostDraft from '../../../models/post/PostDraft';
import profile from '../../../services/profile';
import { useState } from 'react';
import { useAppDispatch } from '../../../redux/hooks';
import { newPost } from '../../../redux/profileSlice';



export default function NewPost() {
    const { register, handleSubmit, reset, formState } = useForm<PostDraft>({
        mode: 'onTouched',
    });

    const [isLoading, setIsLoading] = useState(false);

    const dispatch = useAppDispatch();

    async function submit(draft: PostDraft) {
        try {
            setIsLoading(true);
            const newPostFromServer = await profile.create(draft);
            dispatch(newPost(newPostFromServer))

            reset();
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (e) {
            alert('Failed to add post');
        } finally {
            setIsLoading(false);
            reset();
        }
    }

    return (
        <div className="NewPost">
            <form onSubmit={handleSubmit(submit)}>
                <input
                    type="text"
                    placeholder="Title"
                    {...register('title', {
                        required: {
                            value: true,
                            message: 'You must enter a title',
                        },
                        minLength: {
                            value: 10,
                            message: 'Title must be at least 10 characters',
                        },
                    })}
                />
                {formState.touchedFields.title && formState.errors.title && (
                    <span className="error">{formState.errors.title.message}</span>
                )}
                <textarea
                    placeholder="Content"
                    {...register('body', {
                        required: {
                            value: true,
                            message: 'You must enter a body',
                        },
                        minLength: {
                            value: 20,
                            message: 'Body must be at least 20 characters',
                        },
                    })}
                ></textarea>
                {formState.touchedFields.body && formState.errors.body && (
                    <span className="error">{formState.errors.body.message}</span>
                )}
                <button type="submit" disabled={isLoading}>
                    {isLoading ? 'Adding a post...' : 'Add Post'}
                </button>
            </form>
        </div>
    );
}
# components/posts/new/NewPost.css
.NewPost {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    margin: 20px auto;
    padding: 20px;
    max-width: 700px;
    box-sizing: border-box;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.NewPost:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);
}

.NewPost form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    box-sizing: border-box;
}

.NewPost input[type="text"],
.NewPost textarea {
    width: 100%;
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid #cccccc;
    border-radius: 8px;
    box-sizing: border-box;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    background-color: #f9f9f9;
    font-family: 'Arial', sans-serif;
}

.NewPost input[type="text"]:focus,
.NewPost textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    outline: none;
    background-color: #ffffff;
}

.NewPost textarea {
    resize: vertical;
    min-height: 100px;
}

.NewPost button[type="submit"] {
    background: #4caf50;
    border: none;
    color: white;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.NewPost button[type="submit"]:hover {
    background: #45a049; 
}

.NewPost button[type="submit"]:disabled {
    background: #4caf50; 
    cursor: not-allowed;
}

.error {
    color: #f44336;
    font-size: 0.9rem;
    font-family: Arial, Helvetica, sans-serif;
    font-weight: bold;
    margin: 5px 0 0 0; 
    padding: 2px 5px; 
    background-color: #ffe6e6;
    border: 1px solid #f44336;
    border-radius: 5px;
    box-shadow: 0 2px 4px rgba(244, 67, 54, 0.2);
    text-align: left;
    display: block; 
    width: fit-content; 
}
# components/posts/editPost/EditPost.tsx
import { useNavigate, useParams } from 'react-router-dom';
import './EditPost.css';
import { useEffect } from 'react';
import profileService from '../../../services/profile';
import PostDraft from '../../../models/post/PostDraft';
import { useForm } from 'react-hook-form';
import ButtonLoading from '../../common/ButtonLoading/ButtonLoading';

export default function EditPost() {

    const { id } = useParams<'id'>()
    const {handleSubmit, register, formState, reset} = useForm<PostDraft>()
    const navigate = useNavigate()

    useEffect(() => {
        if(id){
            profileService.getPost(id)
            .then(reset)
            .catch(alert)
        }
    // eslint-disable-next-line react-hooks/exhaustive-deps
    },[])

    async function submit(draft: PostDraft) {
        try{
            const {title, body} = draft
            await profileService.update(id!, {title, body})
            navigate('/profile')

        } catch (e) {
            alert(e)
        }
    }

    return (
        <div className="EditPost">
            <form onSubmit={handleSubmit(submit)}>
                <input
                    type="text"
                    placeholder="Title"
                    {...register('title', {
                        required: {
                            value: true,
                            message: 'You must enter a title',
                        },
                        minLength: {
                            value: 10,
                            message: 'Title must be at least 10 characters',
                        },
                    })}
                />
                {formState.touchedFields.title && formState.errors.title && (
                    <span className="error">{formState.errors.title.message}</span>
                )}
                <textarea
                    placeholder="Content"
                    {...register('body', {
                        required: {
                            value: true,
                            message: 'You must enter a body',
                        },
                        minLength: {
                            value: 20,
                            message: 'Body must be at least 20 characters',
                        },
                    })}
                ></textarea>
                {formState.touchedFields.body && formState.errors.body && (
                    <span className="error">{formState.errors.body.message}</span>
                )}
                <button type="submit" disabled={formState.isSubmitting}>Update Post</button>
            </form>
            {formState.isSubmitting && <ButtonLoading />}
        </div>
    )
}
# components/posts/editPost/EditPost.css
.EditPost {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    margin: 20px auto;
    padding: 20px;
    max-width: 700px;
    box-sizing: border-box;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.EditPost:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.15);
}

.EditPost h1 {
    font-size: 1.8rem;
    color: #333333;
    text-align: center;
    margin-bottom: 20px;
    border-bottom: 2px solid #007bff;
    padding-bottom: 10px;
}

.EditPost form {
    display: flex;
    flex-direction: column;
    gap: 15px;
}

.EditPost label {
    font-size: 1rem;
    color: #555555;
    font-weight: bold;
}

.EditPost input[type="text"],
.EditPost textarea {
    width: 100%;
    padding: 10px 15px;
    font-size: 1rem;
    border: 1px solid #cccccc;
    border-radius: 8px;
    background-color: #f9f9f9;
    box-sizing: border-box;
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    font-family: 'Arial', sans-serif;
}

.EditPost input[type="text"]:focus,
.EditPost textarea:focus {
    border-color: #007bff;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.3);
    outline: none;
}

.EditPost textarea {
    resize: vertical;
    min-height: 100px;
    line-height: 1.5;
}

.EditPost button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 10px 15px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    position: relative;
    gap: 8px;
    min-width: 100px;
}

.EditPost button:hover {
    background: #4caf50;
    color: white;
    box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
    transform: scale(1.05);
}

.ButtonLoading {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    color: #2e7d32;
    font-size: 1rem;
}

.ButtonLoading::after {
    content: '';
    width: 16px;
    height: 16px;
    margin-left: 8px;
    border: 2px solid transparent;
    border-top: 2px solid #2e7d32;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}
# components/posts/editComment/EditComment.tsx
import { useForm } from 'react-hook-form';
import { useState } from 'react';
import './EditComment.css';
import comments from '../../../services/comments';
import CommentDraft from '../../../models/comment/commentDraft';

interface EditCommentProps {
    commentId: string;
    currentBody: string;
    onSave: (updatedBody: string) => void;
    onCancel: () => void;
}

export default function EditComment(props: EditCommentProps): JSX.Element {
    const { commentId, currentBody, onSave, onCancel } = props;

    const { register, handleSubmit, reset, formState } = useForm<CommentDraft>({
        defaultValues: { body: currentBody },
    });
    const [isSubmitting, setIsSubmitting] = useState(false);

    const onSubmit = async (data: CommentDraft) => {
        try {
            setIsSubmitting(true);
            const updatedComment = await comments.updateComment(commentId, data);
            onSave(updatedComment.body); 
            reset();
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (error) {
            alert('Failed to update comment.');
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <form className="EditComment" onSubmit={handleSubmit(onSubmit)}>
            <textarea
                {...register('body', {
                    required: 'Body is required',
                    minLength: {
                        value: 10,
                        message: 'Comment must be at least 10 characters long.',
                    },
                })}
                placeholder="Edit your comment..."
            />
            {formState.errors.body && <span className="error">{formState.errors.body.message}</span>}
            <div className="edit-comment-actions">
                <button type="button" onClick={onCancel} className="cancel-button">
                    Cancel
                </button>
                <button type="submit" className="save-button" disabled={isSubmitting}>
                    {isSubmitting ? 'Saving...' : 'Save'}
                </button>
            </div>
        </form>
    );
}
# components/posts/editComment/EditComment.css
.EditComment {
    display: flex;
    flex-direction: column;
    gap: 15px;
    background: #ffffff;
    border: 1px solid #d1d1d1;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-top: 15px;
    animation: fadeIn 0.3s ease-in-out;
    width: 100%; 
    max-width: 700px; 
}

.EditComment textarea {
    width: 100%; 
    padding: 15px;
    font-size: 1rem;
    border: 1px solid #cccccc;
    border-radius: 8px;
    background-color: #f7f9fa;
    box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: border-color 0.3s ease, box-shadow 0.3s ease;
    resize: none; 
    box-sizing: border-box; 
}

.EditComment textarea:focus {
    border-color: #4caf50;
    box-shadow: 0 0 8px rgba(76, 175, 80, 0.3);
    outline: none;
    background-color: #ffffff;
}

.edit-comment-actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
    margin-top: 15px;
}

.edit-comment-actions .cancel-button {
    background: #ffebee;
    border: 1px solid #f44336;
    color: #d32f2f;
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.edit-comment-actions .cancel-button:hover {
    background: #f44336;
    color: white;
    box-shadow: 0 2px 6px rgba(244, 67, 54, 0.3);
}

.edit-comment-actions .save-button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 10px 20px;
    border-radius: 8px;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.edit-comment-actions .save-button:hover {
    background: #4caf50;
    color: white;
    box-shadow: 0 2px 6px rgba(76, 175, 80, 0.3);
}

@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}
# components/app/App.tsx
import { Provider } from 'react-redux';
import store from '../../redux/store';
import { BrowserRouter } from 'react-router-dom';
import Layout from '../layout/layout/Layout';

export default function App(): JSX.Element {
    return (
        <div className="App">
            <BrowserRouter>
                <Provider store={store}>
                    <Layout />
                </Provider>
            </BrowserRouter>
        </div>
    );
}
# components/app/App.css
.App {
    height: 100%;
}
# components/layout/followers/Followers.css
.Followers {
    display: flex;
    flex-direction: row;
}
# components/layout/followers/Followers.tsx
import { useEffect, useState } from 'react'
import './Followers.css'
import User from '../../../models/user/User'
import followersService from '../../../services/followers'
import Follow from '../../follows/follow/Follow'

export default function Followers() {
    const [followers, setFollowers] = useState<User[]>([])

    useEffect(() => {
        followersService.getFollowers()
            .then(setFollowers)
            .catch(alert)
    }, [])

    return (
        <div className='Followers'>
            {followers.map(follow => <Follow 
                                      key={follow.id} 
                                      user={follow}
                                     ></Follow>)}
        </div>
    )
}
# components/layout/footer/Footer.tsx
import './Footer.css'

export default function Footer() {
    return (
        <div className='Footer'>
            <p>server is: {import.meta.env.VITE_REST_SERVER_URL}</p>            
        </div>
    )
}
# components/layout/not-found/NotFound.tsx
import './NotFound.css'

export default function NotFound() {
    return (
        <div className='NotFound'>
            404 not found
            noop is an afghan hound
            beery is very young
            let's all join the gang
        </div>
    )
}
# components/layout/layout/Layout.tsx
import Followers from '../../follows/followers/Followers'
import Following from '../../follows/following/Following'
import Footer from '../footer/Footer'
import Header from '../header/Header'
import Routing from '../routing/Routing'
import './Layout.css'

export default function Layout() {
    return (
        <div className='Layout'>
            <header>
                <Header />                
            </header>                
            <aside>
                <Following />
            </aside>
            <aside>
                <Followers />
            </aside>
            <main>
                <Routing />
            </main>
            <footer>
                <Footer />
            </footer>
        </div>
    )
}
# components/layout/layout/Layout.css
.Layout {
    display: grid;
    grid-template-columns: 1fr 3fr;
    grid-template-rows: 1fr auto auto 1fr;
    height: 100vh; 
}

.Layout > header {
    grid-column: 1 / span 2;
    grid-row: 1;
}

.Layout > footer {
    grid-column: 1 / span 2;
    grid-row: 4;
}

.Layout > aside:nth-child(1) {
    grid-column: 1;
    grid-row: 2;
    overflow-y: auto; 
    max-height: 100%; 
}

.Layout > aside:nth-child(2) {
    grid-column: 1;
    grid-row: 3;
    overflow-y: auto; 
    max-height: 100%; 
}

.Layout > main {
    grid-column: 2;
    grid-row: 2 / span 2;
    overflow-y: auto; 
}
# components/layout/following/Following.tsx
import './Following.css'
import { useEffect, useState } from 'react'
import User from '../../../models/user/User'
import followingService from '../../../services/following'
import Follow from '../../follows/follow/Follow'

export default function Following() {
    const [following, setFollowing] = useState<User[]>([])

    useEffect(() => {
        followingService.getFollowing()
            .then(setFollowing)
            .catch(alert)
    }, [])

    return (
       <div className='Following'>
                   {following.map(follow => <Follow 
                                             key={follow.id} 
                                             user={follow}
                                            ></Follow>)}
               </div>
    )
}
# components/layout/routing/Routing.tsx
import { Navigate, Route, Routes } from "react-router-dom";
import Profile from "../../posts/profile/Profile";
import Feed from "../../posts/feed/Feed";
import NotFound from "../not-found/NotFound";
import EditPost from "../../posts/editPost/EditPost";

export default function Routing(): JSX.Element {
    return (
        <Routes>
            <Route path="/" element={<Navigate to="/profile"/>} />
            {/* <Route path="/" element={<Profile />} /> */}
            <Route path="/profile" element={<Profile />} />
            <Route path="/feed" element={<Feed />} />
            <Route path="/edit/:id" element={<EditPost />} />
            <Route path="*" element={<NotFound />} />
        </Routes>
    )   
}
# components/layout/header/Header.tsx
import { NavLink } from 'react-router-dom'
import './Header.css'

export default function Header() {
    return (
        <div className='Header'>
            <div>
                Logo
            </div>  
            <div>
                <nav>
                    <NavLink to="/profile">profile</NavLink>
                    <NavLink to="/feed">feed</NavLink>
                    <NavLink to="/search">search</NavLink>
                </nav>
            </div>          
        </div>
    )
}
# components/layout/header/Header.css
.Header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    background-color: #007bff;
    color: white;
    padding: 15px 30px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    border-radius: 12px;
    margin-bottom: 20px;
    font-family: 'Arial', sans-serif;
    transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.Header:hover {
    background-color: #0056b3;
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
}

.Header div:first-child {
    font-size: 1.8rem;
    font-weight: bold;
    text-transform: uppercase;
    letter-spacing: 2px;
    color: white;
}

.Header nav {
    display: flex;
    gap: 20px;
}

.Header nav a {
    text-decoration: none;
    color: white;
    font-size: 1rem;
    font-weight: bold;
    padding: 8px 15px;
    border-radius: 5px;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.Header nav a:hover {
    background-color: rgba(255, 255, 255, 0.2); 
    color: #ffeeba; 
}

.Header nav a.active {
    background-color: #0056b3;
    color: #ffeeba;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
}
# components/common/loading/Loading.css
.Loading {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh; /* ◊í◊ï◊ë◊î ◊©◊ú ◊õ◊ú ◊î◊ì◊£ */
    background: linear-gradient(135deg, #e3f2fd, #fce4ec);
    position: relative;
    overflow: hidden;
}

.Loading img {
    width: 100px;
    height: 100px;
    animation: spin 2s infinite linear, bounce 1.5s infinite ease-in-out;
    border-radius: 50%;
    box-shadow: 0px 0px 30px rgba(255, 255, 255, 0.6);
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}

@keyframes bounce {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-20px);
    }
}

.Loading::before, .Loading::after {
    content: '';
    position: absolute;
    width: 200px;
    height: 200px;
    border: 20px solid rgba(255, 255, 255, 0.5);
    border-radius: 50%;
    animation: pulse 2s infinite ease-in-out;
}

.Loading::before {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border-color: rgba(255, 255, 255, 0.3);
}

.Loading::after {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(0.8);
    border-color: rgba(255, 255, 255, 0.6);
    animation-delay: 1s;
}

@keyframes pulse {
    0%, 100% {
        transform: translate(-50%, -50%) scale(1);
        opacity: 0.8;
    }
    50% {
        transform: translate(-50%, -50%) scale(1.3);
        opacity: 0.4;
    }
}
# components/common/loading/Loading.tsx
import './Loading.css';
import loading from  '../../../assets/images/loading.gif'

export default function Loading() {

    
    return (
        <div className='Loading'>
            <img src={loading} alt='loading'/>
        </div>
    )
}
# components/common/ButtonLoading/ButtonLoading.tsx
import './ButtonLoading.css';

export default function ButtonLoading() {
    return (
        <span className="ButtonLoading">
            Loading...
        </span>
    );
}
# components/common/ButtonLoading/ButtonLoading.css
.ButtonLoading {
    display: flex;
    justify-content: center;
    align-items: center;
    color: #2e7d32;
    font-size: 1rem;
    font-weight: bold;
    position: relative;
    height: 100%; /* Ensure it covers the button height */
    width: 100%; /* Ensure it covers the button width */
    text-align: center;
}

.ButtonLoading::after {
    content: '';
    width: 16px;
    height: 16px;
    margin-left: 8px;
    border: 2px solid transparent;
    border-top: 2px solid #2e7d32;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}
# components/common/LoaddingPageForProfile/LoaddingPageForProfile.tsx
import './LoaddingPageForProfile.css'

const PostsSkeleton = () => {
  return (
    <div className="posts-skeleton-container">
      <div className="posts-skeleton-new-post">
        <div className="posts-skeleton-new-post-title"></div>
        <div className="posts-skeleton-new-post-input"></div>
        <div className="posts-skeleton-new-post-input"></div>
        <div className="posts-skeleton-new-post-button"></div>
      </div>
      
      {[...Array(3)].map((_, index) => (
        <div key={index} className="posts-skeleton-post">
          <div className="posts-skeleton-post-header">
            <div className="posts-skeleton-post-title"></div>
            <div className="posts-skeleton-post-subtitle"></div>
          </div>
          <div className="posts-skeleton-post-body"></div>
          <div className="posts-skeleton-post-actions">
            <div className="posts-skeleton-action-button"></div>
            <div className="posts-skeleton-action-button"></div>
            <div className="posts-skeleton-action-button"></div>
          </div>
        </div>
      ))}
    </div>
  );
};

export default PostsSkeleton;
# components/common/LoaddingPageForProfile/LoaddingPageForProfile.css
.posts-skeleton-container {
    padding: 1rem;
    max-width: 700px;
    margin: 0 auto;
}

.posts-skeleton-new-post {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.posts-skeleton-new-post-title,
.posts-skeleton-new-post-input,
.posts-skeleton-new-post-button {
    background-color: #eaeaea;
    border-radius: 8px;
}

.posts-skeleton-new-post-title {
    height: 24px;
    width: 150px;
}

.posts-skeleton-new-post-input {
    height: 100px;
}

.posts-skeleton-new-post-button {
    height: 40px;
    width: 120px;
    align-self: flex-start;
}

.posts-skeleton-post {
    background: #ffffff;
    border: 1px solid #e0e0e0;
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
}

.posts-skeleton-post-header {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-bottom: 1rem;
}

.posts-skeleton-post-title {
    height: 24px;
    width: 250px;
    background-color: #eaeaea;
    border-radius: 8px;
}

.posts-skeleton-post-subtitle {
    height: 16px;
    width: 180px;
    background-color: #eaeaea;
    border-radius: 8px;
}

.posts-skeleton-post-body {
    height: 120px;
    background-color: #eaeaea;
    border-radius: 8px;
    margin-bottom: 1rem;
}

.posts-skeleton-post-actions {
    display: flex;
    gap: 1rem;
}

.posts-skeleton-action-button {
    height: 40px;
    width: 100px;
    background-color: #eaeaea;
    border-radius: 50px;
}

@keyframes pulse {
    0% {
        opacity: 0.6;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.6;
    }
}

.posts-skeleton-new-post-title,
.posts-skeleton-new-post-input,
.posts-skeleton-new-post-button,
.posts-skeleton-post-title,
.posts-skeleton-post-subtitle,
.posts-skeleton-post-body,
.posts-skeleton-action-button {
    animation: pulse 1.5s infinite ease-in-out;
}
# components/common/LoaddingPageEffect-followers/LoaddingPageEffect.tsx
import './LoaddingPageEffect.css'

const FollowSkeleton = () => {
  return (
    <div className="skeleton-container">
      {/* Title skeleton */}
      <div className="skeleton-title"></div>
      
      {/* Items */}
      {[...Array(5)].map((_, index) => (
        <div key={index} className="skeleton-item">
          {/* Avatar */}
          <div className="skeleton-avatar"></div>
          
          {/* Content */}
          <div className="skeleton-content">
            <div className="skeleton-text"></div>
            <div className="skeleton-text small"></div>
          </div>
          
          {/* Button */}
          <div className="skeleton-button"></div>
        </div>
      ))}
    </div>
  );
};

export default FollowSkeleton;
# components/common/LoaddingPageEffect-followers/LoaddingPageEffect.css
.skeleton-container {
    padding: 1rem;
    height: 100%;
}

.skeleton-header {
    margin-bottom: 1.5rem;
}

.skeleton-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem;
    border-bottom: 1px solid #eaeaea;
    margin-bottom: 0.5rem;
}

.skeleton-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background-color: #eaeaea;
}

.skeleton-content {
    flex: 1;
    margin: 0 1rem;
}

.skeleton-text {
    height: 16px;
    background-color: #eaeaea;
    border-radius: 4px;
    margin-bottom: 8px;
    width: 150px;
}

.skeleton-text.small {
    width: 100px;
    height: 12px;
}

.skeleton-button {
    width: 80px;
    height: 32px;
    background-color: #eaeaea;
    border-radius: 16px;
}

.skeleton-title {
    width: 120px;
    height: 24px;
    background-color: #eaeaea;
    border-radius: 4px;
    margin-bottom: 1rem;
}

@keyframes pulse {
    0% {
        opacity: 0.6;
    }
    50% {
        opacity: 1;
    }
    100% {
        opacity: 0.6;
    }
}

.skeleton-avatar, .skeleton-text, .skeleton-button, .skeleton-title {
    animation: pulse 1.5s infinite ease-in-out;
}
# components/follows/followers/Followers.css
.Follow {
    display: flex;
    align-items: center;
    gap: 15px;
    padding: 10px 0;
    border-bottom: 1px solid #e0e0e0;
}

.Follow:last-child {
    border-bottom: none;
}

.user-avatar {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #f3f4f6;
    border: 2px solid #007bff;
    font-size: 24px;
    color: #007bff;
}

.user-info {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 2px;
}

.user-name {
    font-size: 1.2rem;
    font-weight: bold;
    color: #333333;
    transition: color 0.3s ease;
}

.user-name:hover {
    color: #007bff;
    text-decoration: underline;
}

.user-email {
    font-size: 0.9rem;
    color: #666666;
}

.follow-toggle-button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.follow-toggle-button:hover {
    background: #4caf50;
    color: white;
    box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
}

.follow-toggle-button.unfollow {
    background: #ffebee;
    border: 1px solid #f44336;
    color: #b71c1c;
}

.follow-toggle-button.unfollow:hover {
    background: #f44336;
    color: white;
    box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);
}
# components/follows/followers/Followers.tsx
import './Followers.css';
import { useEffect, useState } from 'react';
import followersService from '../../../services/followers';
import Follow from '../follow/Follow';
import { useAppDispatch, useAppSelector } from '../../../redux/hooks';
import { initFollowers } from '../../../redux/followersSlice';
import FollowSkeleton from '../../common/LoaddingPageEffect-followers/LoaddingPageEffect';

export default function Followers() {
    const dispatch = useAppDispatch();
    const followers = useAppSelector(state => state.followers.followers);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        followersService.getFollowers()
            .then(followers => {
                dispatch(initFollowers(followers));
                // ◊ß◊¶◊™ ◊ì◊ô◊ú◊ô◊ô ◊û◊ú◊ê◊õ◊ï◊™◊ô ◊õ◊ì◊ô ◊©◊†◊®◊ê◊î ◊ê◊™ ◊ê◊§◊ß◊ò ◊î◊ò◊¢◊ô◊†◊î
                setTimeout(() => setIsLoading(false), 1000);
            })
            .catch(error => {
                alert(error);
                setIsLoading(false);
            });
    }, [dispatch]);

    if (isLoading) {
        return <div className="Followers"><FollowSkeleton /></div>;
    }

    return (
        <div className="Followers">
            <h2>Followers</h2>
            {followers.map(user => (
                <Follow
                    key={user.id}
                    user={user}
                />
            ))}
        </div>
    );
}
# components/follows/follow/Follow.tsx
import './Follow.css';
import User from '../../../models/user/User';
import { useState } from 'react';
import { useAppDispatch, useAppSelector } from '../../../redux/hooks';
import { updateFollowStatus } from '../../../redux/followingSlice';
import { removeFollower, addFollower } from '../../../redux/followersSlice';
import followingService from '../../../services/following';


interface FollowProps {
    user: User;
}

export default function Follow({ user }: FollowProps) {
    const { id, name } = user;
    const [loading, setLoading] = useState(false);

    const dispatch = useAppDispatch();
    const isFollowing = useAppSelector(state => 
        state.following.following.some(f => f.id === id)
    );

    async function handleToggleFollow() {
        if (isFollowing && !window.confirm(`Are you sure you want to stop following ${name}?`)) {
            return;
        }

        setLoading(true);
        try {
            if (isFollowing) {
                // Unfollow
                await followingService.unFollow(id);
                
                // ◊¢◊ì◊õ◊ï◊ü ◊°◊ò◊ô◊ô◊ò ◊ß◊ú◊ô◊ô◊†◊ò ◊¶◊ì
                dispatch(updateFollowStatus({ userId: id, isFollowing: false }));
                dispatch(removeFollower(id));
            } else {
                // Follow
                await followingService.follow(id);
                
                // ◊¢◊ì◊õ◊ï◊ü ◊°◊ò◊ô◊ô◊ò ◊ß◊ú◊ô◊ô◊†◊ò ◊¶◊ì
                dispatch(updateFollowStatus({ userId: id, isFollowing: true }));
                dispatch(addFollower({ ...user }));
            }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        } catch (e) {
            alert('Failed to toggle follow status');
        } finally {
            setLoading(false);
        }
    }

    return (
        <div className="Follow">
            <div className="user-avatar">
                <span className="user-icon">üë§</span>
            </div>
            <div className="user-info">
                <span className="user-name">{name}</span>
                <span className="user-email">{user.email}</span>
            </div>
            <button
                className={`follow-toggle-button ${isFollowing ? 'unfollow' : ''}`}
                onClick={handleToggleFollow}
                disabled={loading}
            >
                {loading ? 
                    (isFollowing ? 'Unfollowing...' : 'Following...') : 
                    (isFollowing ? 'Unfollow' : 'Follow')
                }
            </button>
        </div>
    );
}
# components/follows/follow/Follow.css
.Follow {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 10px 0;
    border-bottom: 1px solid #e0e0e0;
    gap: 15px;
}

.Follow:last-child {
    border-bottom: none;
}

.user-avatar {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background-color: #f3f4f6;
    border: 2px solid #007bff;
    font-size: 24px;
    color: #007bff;
    flex-shrink: 0; 
}

.user-info {
    flex: 1; 
    display: flex;
    flex-direction: column;
    gap: 5px;
    justify-content: center; 
}

.user-name {
    font-size: 1rem;
    font-weight: bold;
    color: #333333;
    transition: color 0.3s ease;
}

.user-name:hover {
    color: #007bff;
    text-decoration: underline;
}

.user-email {
    font-size: 0.9rem;
    color: #666666;
}

.follow-toggle-button {
    background: #e8f5e9;
    border: 1px solid #4caf50;
    color: #2e7d32;
    padding: 8px 15px;
    border-radius: 50px;
    font-size: 0.9rem;
    cursor: pointer;
    transition: all 0.3s ease;
    flex-shrink: 0; 
}

.follow-toggle-button:hover {
    background: #4caf50;
    color: white;
    box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
}

.follow-toggle-button.unfollow {
    background: #ffebee;
    border: 1px solid #f44336;
    color: #b71c1c;
}

.follow-toggle-button.unfollow:hover {
    background: #f44336;
    color: white;
    box-shadow: 0 4px 8px rgba(244, 67, 54, 0.3);
}
# components/follows/following/Following.tsx
import './Following.css';
import { useEffect, useState } from 'react';
import followingService from '../../../services/following';
import Follow from '../follow/Follow';
import { useAppDispatch, useAppSelector } from '../../../redux/hooks';
import { init } from '../../../redux/followingSlice';
import FollowSkeleton from '../../common/LoaddingPageEffect-followers/LoaddingPageEffect';

export default function Following() {
    const following = useAppSelector(state => state.following.following);
    const dispatch = useAppDispatch();
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        followingService.getFollowing()
            .then(following => {
                // ◊û◊ì◊û◊î ◊î◊©◊î◊ô◊ô◊î ◊©◊ú ◊î◊ò◊¢◊ô◊†◊î ◊õ◊ì◊ô ◊©◊†◊®◊ê◊î ◊ê◊™ ◊î◊ê◊§◊ß◊ò
                setTimeout(() => {
                    dispatch(init(following));
                    setIsLoading(false);
                }, 1500); // 1.5 ◊©◊†◊ô◊ï◊™ ◊©◊ú ◊ò◊¢◊ô◊†◊î ◊û◊ì◊ï◊û◊î
            })
            .catch(error => {
                alert(error);
                setIsLoading(false);
            });
    }, [dispatch]);

    return (
        <div className="Following">
            {isLoading ? (
                <FollowSkeleton />
            ) : (
                <>
                    <h2>Following</h2>
                    {following.map(user => (
                        <Follow
                            key={user.id}
                            user={user}
                        />
                    ))}
                </>
            )}
        </div>
    );
}
# components/follows/following/Following.css
.Followers {
    display: flex;
    flex-direction: column;
}
# vite-env.d.ts
/// <reference types="vite/client" />

# hooks/useTitle.ts
import { useEffect } from "react";

export default function useTitle(title: string) {
    useEffect(() => {
        document.title = title
    }, [ title ])
}
# redux/followersSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import User from "../models/user/User";

interface FollowersState {
    followers: User[];
}

const initialState: FollowersState = {
    followers: []
}

export const followersSlice = createSlice({
    name: 'followers',
    initialState,
    reducers: {
        initFollowers: (state, action: PayloadAction<User[]>) => {
            state.followers = action.payload;
        },
        removeFollower: (state, action: PayloadAction<string>) => {
            state.followers = state.followers.filter(f => f.id !== action.payload);
        },
        addFollower: (state, action: PayloadAction<User>) => {
            const existingFollowerIndex = state.followers.findIndex(f => f.id === action.payload.id);
            
            if (existingFollowerIndex === -1) {
                state.followers.push(action.payload);
            }
        },
                updateFollowerStatus: (state, action: PayloadAction<{userId: string, isFollowing: boolean}>) => {
            const { userId, isFollowing } = action.payload;
            
            if (isFollowing) {
                const existingFollowerIndex = state.followers.findIndex(f => f.id === userId);
                if (existingFollowerIndex === -1) {
                    state.followers.push({ id: userId } as User);
                }
            } else {
                state.followers = state.followers.filter(f => f.id !== userId);
            }
        }
    }
});

export const { initFollowers, removeFollower, addFollower, updateFollowerStatus } = followersSlice.actions;
export default followersSlice.reducer;
# redux/profileSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import Post from "../models/post/Post";
import Comment from "../models/comment/Comment";

interface profileState {
    posts: Post[];
}

const initialState: profileState = {
    posts: []
};

export const profileSlice = createSlice({
    name: "profile",
    initialState,
    reducers: {
        init: (state, action: PayloadAction<Post[]>) => {
            state.posts = action.payload; // ◊ê◊™◊ó◊ï◊ú ◊®◊©◊ô◊û◊™ ◊î◊§◊ï◊°◊ò◊ô◊ù
        },
        newPost: (state, action: PayloadAction<Post>) => {
            state.posts.unshift(action.payload); // ◊î◊ï◊°◊§◊™ ◊§◊ï◊°◊ò ◊ó◊ì◊©
        },
        removePost: (state, action: PayloadAction<string>) => {
            state.posts = state.posts.filter(p => p.id !== action.payload); // ◊î◊°◊®◊™ ◊§◊ï◊°◊ò
        },
        update: (state, action: PayloadAction<Post>) => {
            const index = state.posts.findIndex(p => p.id === action.payload.id);
            if (index > -1) {
                state.posts[index] = action.payload; // ◊¢◊ì◊õ◊ï◊ü ◊§◊ï◊°◊ò ◊ß◊ô◊ô◊ù
            }
        },
        addComment: (state, action: PayloadAction<Comment>) => {
            state.posts.find(p => p.id === action.payload.postId)?.comments.unshift(action.payload);
        }
    }
});

export const { init, newPost, removePost, update, addComment } = profileSlice.actions;
export default profileSlice.reducer;
# redux/feedSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import Post from "../models/post/Post";
import Comment from "../models/comment/Comment";

interface FeedState {
    posts: Post[]
}

const initialState: FeedState = {
    posts: []
}

export const feedSlice = createSlice({
    name: 'feed',
    initialState,
    reducers: {
        init: (state, action: PayloadAction<Post[]>) => {
            state.posts = action.payload
        },
        addComment: (state, action: PayloadAction<Comment>) => {
            state.posts.find(p => p.id === action.payload.postId)?.comments.push(action.payload)
        }
    }
})

export const { init, addComment } = feedSlice.actions

export default feedSlice.reducer

# redux/hooks.ts
import { AppDispatch, RootState } from './store';
import { useDispatch, useSelector } from 'react-redux';

export const useAppSelector = useSelector.withTypes<RootState>();
export const useAppDispatch = useDispatch.withTypes<AppDispatch>();



# redux/store.ts
import { configureStore } from "@reduxjs/toolkit";
import { followingSlice } from "./followingSlice";
import { followersSlice } from "./followersSlice";
import { profileSlice } from "./profileSlice";
import { feedSlice } from "./feedSlice";

const store = configureStore({
    reducer: {
        following: followingSlice.reducer,
        followers: followersSlice.reducer,
        profile: profileSlice.reducer,
        feed: feedSlice.reducer
    }
});

export default store;

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;
# redux/followingSlice.ts
import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import User from "../models/user/User";

interface FollowingState {
    following: User[];
    followers: User[];
}

const initialState: FollowingState = {
    following: [],
    followers: []
}

export const followingSlice = createSlice({
    name: 'following',
    initialState,
    reducers: {
        init: (state, action: PayloadAction<User[]>) => {
            state.following = action.payload;
        },
        unfollow: (state, action: PayloadAction<{userId: string}>) => {
            state.following = state.following.filter(f => f.id !== action.payload.userId);
        },
        follow: (state, action: PayloadAction<User>) => {

            const existingFollowIndex = state.following.findIndex(f => f.id === action.payload.id);
            
            if (existingFollowIndex === -1) {
                state.following.push(action.payload);
            }
        },
        initFollowers: (state, action: PayloadAction<User[]>) => {
            state.followers = action.payload;
        },
        updateFollowStatus: (state, action: PayloadAction<{userId: string, isFollowing: boolean}>) => {
            const { userId, isFollowing } = action.payload;
            
            if (isFollowing) {
                const existingFollowIndex = state.following.findIndex(f => f.id === userId);
                if (existingFollowIndex === -1) {
                    state.following.push({ id: userId } as User);
                }
            } else {
                state.following = state.following.filter(f => f.id !== userId);
            }
        }
    }
})

export const { init, unfollow, follow, initFollowers, updateFollowStatus } = followingSlice.actions;
export default followingSlice.reducer;
# services/comments.ts
import axios from "axios";
import CommentDraft from "../models/comment/commentDraft";
import Comment from "../models/comment/Comment";

class Comments {
    async create(postId: string, draft: CommentDraft): Promise<Comment> {
        const response = await axios.post<Comment>(`${import.meta.env.VITE_REST_SERVER_URL}/comments/${postId}`, draft);
        return response.data;
    }

    async getComment(postId: string): Promise<Comment> {
        const response = await axios.get<Comment>(`${import.meta.env.VITE_REST_SERVER_URL}/comments/${postId}`);
        return response.data;
    }

    async updateComment(postId: string, draft: CommentDraft): Promise<Comment> {
        const response = await axios.patch<Comment>(`${import.meta.env.VITE_REST_SERVER_URL}/comments/${postId}`, draft);
        return response.data;
    }

    async deleteComment(commentId: string): Promise<void> {
        const response = await axios.delete(`${import.meta.env.VITE_REST_SERVER_URL}/comments/${commentId}`);
        return response.data;
    }
}

//singleton
const comments = new Comments();
export default comments;
# services/followers.ts
import axios from "axios";
import User from "../models/user/User";

class Followers {
    async getFollowers(): Promise<User[]> {
        const response = await axios.get<User[]>(`${import.meta.env.VITE_REST_SERVER_URL}/follows/followers`);
        return response.data;
    }

    async follow(userId: string): Promise<void> {
        await axios.post(`${import.meta.env.VITE_REST_SERVER_URL}/follows/follow/${userId}`);
    }
}

// Singleton
const followers = new Followers();
export default followers;
# services/following.ts
import axios from "axios";
import User from "../models/user/User";

class Following {
    async getFollowing(): Promise<User[]> {
        const response = await axios.get<User[]>(`${import.meta.env.VITE_REST_SERVER_URL}/follows/following`);
        return response.data;
    }

    async unFollow(userId: string): Promise<void> {
        await axios.post(`${import.meta.env.VITE_REST_SERVER_URL}/follows/unfollow/${userId}`);
    }

    async follow(userId: string): Promise<void> {
        await axios.post(`${import.meta.env.VITE_REST_SERVER_URL}/follows/follow/${userId}`);
    }
}

const following = new Following();
export default following;
# services/feed.ts
import axios from "axios";
import Post from "../models/post/Post";

class Feed {
    async getFeed(): Promise<Post[]> {
        const response = await axios.get<Post[]>(`${import.meta.env.VITE_REST_SERVER_URL}/feed`)
        return response.data
    }
}

// singleton
const feed = new Feed()
export default feed
# services/profile.ts
import axios from "axios";
import Post from "../models/post/Post";
import PostDraft from "../models/post/PostDraft";

class Profile {
    async getProfile(): Promise<Post[]> {
        const response = await axios.get<Post[]>(`${import.meta.env.VITE_REST_SERVER_URL}/posts`);
        return response.data;
    }

    async remove(id: string): Promise<boolean> {
        const response = await axios.delete<boolean>(`${import.meta.env.VITE_REST_SERVER_URL}/posts/${id}`);
        return response.data;
    }

    async create(draft: PostDraft): Promise<Post> {
        const response = await axios.post<Post>(`${import.meta.env.VITE_REST_SERVER_URL}/posts/`, draft);
        return response.data;
    }

    async update(id: string, draft: PostDraft): Promise<Post> {
        const { title, body } = draft;
        const response = await axios.patch<Post>(`${import.meta.env.VITE_REST_SERVER_URL}/posts/${id}`, { title, body });
        return response.data;
    }

    async getPost(id: string): Promise<Post> {
        const response = await axios.get<Post>(`${import.meta.env.VITE_REST_SERVER_URL}/posts/${id}`);
        return response.data;
    }
}

// singleton
const profile = new Profile();
export default profile;
